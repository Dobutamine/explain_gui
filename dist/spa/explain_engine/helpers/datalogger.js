class Datalogger{constructor(e){this._model=e,this._datalogger_timer=0,this.update_interval=.015,this.annotations_processed=!1,this.realtime=!1,this.realtime_timer=0,this.realtime_timer_interval=.015,this.data=[],this.data_rt=[],this.watched_models=["AA","LV","LA","RV","RA","monitor"],this.watched_models_rt=["AA","LV","LA","RV","RA","LA_LV","RA_RV","monitor"]}sendMessage=(e,t,s,o,i)=>{postMessage({type:e,target:t,action:s,data:o,return_tag:i})};getModelProperty=(e,t)=>{let s={};return this._model.components[e]&&(s=this._model.components[e][t]),s};getModelProps=e=>{let t={};if(!e)return Object.keys(this._model.components).forEach((e=>{t[e]={},Object.keys(this._model.components[e]).forEach((s=>{"_"!==s.substring(0,1)&"pv"!==s&"flows"!==s&null!==this._model.components[e][s]&&("object"===typeof this._model.components[e][s]?this._model.components[e][s].length>0&&(t[e][s]=this._model.components[e][s].join(",")):t[e][s]=this._model.components[e][s])}))})),t;if(this._model.components[e]){let t={};return Object.keys(this._model.components[e]).forEach((s=>{"object"!==typeof this._model.components[e][s]&&(t[s]=this._model.components[e][s])})),t}};removeDuplicates(e){return e.filter(((t,s)=>e.indexOf(t)===s))}setWatchedModelsRT=e=>{let t=[];this.watched_models_rt=[],"string"===typeof e?t.push(e):t=e,t.forEach((e=>{this.watched_models_rt.push(e)})),this.watched_models_rt.push("monitor"),this.watched_models_rt=this.removeDuplicates(this.watched_models_rt)};setWatchedModels=e=>{let t=[];this.watched_models=[],"string"===typeof e?t.push(e):t=e,t.forEach((e=>{this.watched_models.push(e)})),this.watched_models.push("monitor"),this.watched_models=this.removeDuplicates(this.watched_models)};setUpdateInterval=e=>{this.update_interval=e,sendMessage("mes",null,null,[`logger interval is ${e} s.`])};setModelState(e){this._model.name=e.name,this._model.description=e.description,this._model.weight=e.weight,this._model.model_time_total=e.model_time_total,this._model.modeling_stepsize=e.modeling_stepsize,Object.keys(e).forEach((t=>{"object"===typeof e[t]&&Object.keys(e[t]).forEach((s=>{this._model.components[t][s]=e[t][s]}))})),sendMessage("mes",null,null,["new state processed"]),sendMessage("mes",null,null,["ready"]),console.log(this._model)}getModelJSON(){let e={name:this._model.name,description:this._model.description,weight:this._model.weight,model_time_total:this._model.model_time_total,modeling_stepsize:this._model.modeling_stepsize,blood_compartment_definitions:[],blood_connector_definitions:[],valve_definitions:[],gas_compartment_definitions:[],gas_connector_definitions:[],container_definitions:[],diffusor_definitions:[],exchanger_definitions:[]};return Object.keys(this._model.components).forEach((t=>{let s=Object.assign({},this._model.components[t]);switch(delete s._model,delete s.model,delete s.comp1,delete s.comp2,s.subtype){case"blood_compartment":e.blood_compartment_definitions.push(s);break;case"pump":e.blood_compartment_definitions.push(s);break;case"blood_connector":e.blood_connector_definitions.push(s);break;case"valve":e.valve_definitions.push(s);break;case"gas_compartment":e.gas_compartment_definitions.push(s);break;case"gas_connector":e.gas_connector_definitions.push(s);break;case"container":e.container_definitions.push(s);break;case"diffusor":e.diffusor_definitions.push(s);break;case"exchanger":e.exchanger_definitions.push(s);break;case"":e[s.name]=s;break}})),sendMessage("mes",null,null,["datalogger build a json representation of the current model state"]),e}getModelStateFull(){let e={name:this._model.name,description:this._model.description,weight:this._model.weight,model_time_total:this._model.model_time_total,modeling_stepsize:this._model.modeling_stepsize,ncc_ventricular:this._model.components.ecg.ncc_ventricular};return Object.keys(this._model.components).forEach((t=>{let s=Object.assign({},this._model.components[t]);delete s._model,delete s.model,delete s.comp1,delete s.comp2,e[s.name]=s})),sendMessage("mes",null,null,["datalogger took a snapshot of the current model state"]),e}getModelStateWatched=(e,t,s="")=>{let o={time:e,ncc_ventricular:this._model.components.ecg.ncc_ventricular};return o["annotation"]=s,t.forEach((e=>{let t=Object.assign({},this._model.components[e]);delete t._model,delete t.model,delete t.comp1,delete t.comp2,o[t.name]=t})),o};sendModelState=(e,t)=>{this.sendMessage("data","state",null,this.getModelStateWatched(e,t))};resetData(){this.data=[]}sendData(){this.sendMessage("data","datalogger_output",null,this.data),this.data=null}modelStepRealtime=(e,t)=>{if(this._datalogger_timer>=this.update_interval){null===this.data_rt&&(this.data_rt=[]),null===this.data&&(this.data=[]),this._datalogger_timer=0;let s=this.getModelStateWatched(e,this.watched_models_rt,t);this.data_rt.push(s),this.annotations_processed=!0}this.realtime_timer>=this.realtime_timer_interval&&(this.sendMessage("rt",null,null,this.data_rt),this.realtime_timer=0,this.data_rt=null),this._datalogger_timer+=this._model.modeling_stepsize,this.realtime_timer+=this._model.modeling_stepsize};modelStep=(e,t)=>{this._datalogger_timer>=this.update_interval&&(null===this.data&&(this.data=[]),this._datalogger_timer=0,this.data.push(this.getModelStateWatched(e,this.watched_models,t)),this.annotations_processed=!0),this._datalogger_timer+=this._model.modeling_stepsize}}